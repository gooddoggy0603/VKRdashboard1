import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import numpy as np

st.set_page_config(layout="wide") 



def load_excel():
    uploaded_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª", type=["xlsx"])
    if uploaded_file is not None:
        try:
            raw_df = pd.read_excel(uploaded_file, header=None)  
            st.write("–ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:")
            st.write(raw_df.head(10))  

           
            header_row = st.number_input(
                "–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ (0 = –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)",
                min_value=0, max_value=len(raw_df) - 1, value=0, step=1)
            df = pd.read_excel(uploaded_file, header=header_row)

           
            df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            st.write("–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ:", df.columns.tolist()) 
            st.write(df.head())  
            return df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    return None



def auto_detect_columns(df):
    mapping = {
        "–ò–ü": ["–ò–ü", "–ú–∞–≥–∞–∑–∏–Ω", "–ö–æ–º–ø–∞–Ω–∏—è"],
        "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": ["–°/—Å", "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å, ‚ÇΩ"],
        "–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞": ["–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞", "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", "–ü—Ä–æ–¥–∞–∂–Ω–∞—è —Ü–µ–Ω–∞", "–ë–∞–∑–æ–≤–∞—è, ‚ÇΩ"],
        "–ü—Ä–æ–¥–∞–∂–∞ —à—Ç": ["–ü—Ä–æ–¥–∞–∂–∞ —à—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–ª-–≤–æ", "–ó–∞–∫–∞–∑—ã", "–ó–∞–∫–∞–∑—ã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —à—Ç."],
        "–¢–æ–≤–∞—Ä": ["–¢–æ–≤–∞—Ä", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ–¥—É–∫—Ç", "–ù–∞–∑–≤–∞–Ω–∏–µ"],
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤", "–¢–∏–ø —Ç–æ–≤–∞—Ä–∞"]  
    }
    detected_columns = {}
    for key, possible_names in mapping.items():
        for name in possible_names:
            if name in df.columns:
                detected_columns[key] = name
                break
    return detected_columns



def calculate_metrics(df, columns):
    metrics_by_ip = {}
    try:
        grouped = df.groupby(columns["–ò–ü"])
        for ip, group in grouped:
            metrics = {}
            
            if "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å" in columns and "–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞" in columns and "–ü—Ä–æ–¥–∞–∂–∞ —à—Ç" in columns:
                group["–ú–∞—Ä–∂–∞"] = (pd.to_numeric(group[columns["–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞"]], errors="coerce") - pd.to_numeric(
                    group[columns["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"]], errors="coerce")) * pd.to_numeric(group[columns["–ü—Ä–æ–¥–∞–∂–∞ —à—Ç"]],
                                                                                       errors="coerce")
                metrics["–û–±—â–∞—è –º–∞—Ä–∂–∞"] = round(group["–ú–∞—Ä–∂–∞"].sum(), 2)

            
            if "–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞" in columns and "–ü—Ä–æ–¥–∞–∂–∞ —à—Ç" in columns:
                group["–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"] = pd.to_numeric(group[columns["–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞"]], errors="coerce") * pd.to_numeric(
                    group[columns["–ü—Ä–æ–¥–∞–∂–∞ —à—Ç"]], errors="coerce")
                metrics["–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"] = int(group["–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"].sum())

            
            if "–ü—Ä–æ–¥–∞–∂–∞ —à—Ç" in columns:
                metrics["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤"] = int(pd.to_numeric(group[columns["–ü—Ä–æ–¥–∞–∂–∞ —à—Ç"]], errors="coerce").sum())

            
            if "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂" in group.columns and "–ü—Ä–æ–¥–∞–∂–∞ —à—Ç" in columns:
                total_orders = metrics["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤"]
                metrics["–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"] = round(metrics["–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"] / total_orders, 2) if total_orders > 0 else 0

            metrics_by_ip[ip] = metrics
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ò–ü: {e}")
    return metrics_by_ip



def plot_category_sales(df, columns, ip_name):
    
    if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" not in columns or "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂" not in columns:
        st.warning(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –ò–ü {ip_name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    
    ip_df = df[df[columns["–ò–ü"]] == ip_name]

    
    if ip_df.empty:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ü {ip_name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

   
    if columns["–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"] not in ip_df.columns or columns["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] not in ip_df.columns:
        st.warning(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Å—É–º–º–µ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ò–ü {ip_name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    
    category_sales = ip_df.groupby(columns["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"])[columns["–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"]].sum()

    
    if category_sales.empty or category_sales.sum() == 0:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ò–ü {ip_name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    
    st.subheader(f"–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è {ip_name}")
    fig, ax = plt.subplots(figsize=(8, 5))
    bars = category_sales.sort_values(ascending=False).plot(kind="bar", ax=ax, color="skyblue")
    plt.ylabel("–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ (‚ÇΩ)")
    ax.yaxis.set_major_formatter(FuncFormatter(format_number))
    plt.grid(axis="y", linestyle="--", alpha=0.7)
    plt.xticks(rotation=45)

  
    for bar, value in zip(ax.patches, category_sales.sort_values(ascending=False)):
        ax.text(
            bar.get_x() + bar.get_width() / 2,
            bar.get_height(),
            f"{int(value):,}".replace(",", " "),
            ha="center",
            va="bottom",
            fontsize=10
        )

    st.pyplot(fig)



def format_number(x, _):
    return f"{int(x):,}".replace(",", " ")



def compare_ips(metrics_by_ip, comparison_metric, selected_ips):
    data = {ip: metrics[comparison_metric] for ip, metrics in metrics_by_ip.items() if ip in selected_ips}
    labels = list(data.keys())
    values = list(data.values())

    #
    if not values or sum(values) == 0:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –ò–ü.")
        return

    
    def autopct_generator(values):
        def autopct(pct):
            absolute = int(round(pct / 100. * sum(values)))
            return f"{pct:.1f}% ({absolute})"

        return autopct

    
    fig, ax = plt.subplots(figsize=(8, 8))
    ax.pie(values, labels=labels, autopct=autopct_generator(values), startangle=140, colors=plt.cm.tab20c.colors)
    ax.axis('equal')  
    st.pyplot(fig)



df = load_excel()

if df is not None:
    
    detected_columns = auto_detect_columns(df)
    st.write("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", detected_columns)

    
    for key in ["–ò–ü", "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞", "–ü—Ä–æ–¥–∞–∂–∞ —à—Ç", "–¢–æ–≤–∞—Ä", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]:
        if key not in detected_columns:
            detected_columns[key] = st.selectbox(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è '{key}'", df.columns)

    
    if "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂" not in detected_columns:
        if "–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞" in detected_columns and "–ü—Ä–æ–¥–∞–∂–∞ —à—Ç" in detected_columns:
            df["–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"] = pd.to_numeric(df[detected_columns["–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞"]], errors="coerce") * pd.to_numeric(
                df[detected_columns["–ü—Ä–æ–¥–∞–∂–∞ —à—Ç"]], errors="coerce")
            detected_columns["–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"] = "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"

    
    metrics_by_ip = calculate_metrics(df, detected_columns)
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –ò–ü")
    for ip, metrics in metrics_by_ip.items():
        with st.expander(f"–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ò–ü: {ip}"):
            st.write(metrics)
            plot_category_sales(df, detected_columns, ip)

    
    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ò–ü")
    if "comparison_metric" not in st.session_state:
        st.session_state.comparison_metric = "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂"

    if "selected_ips" not in st.session_state:
        st.session_state.selected_ips = list(metrics_by_ip.keys())

    valid_ips = list(metrics_by_ip.keys())
    st.session_state.selected_ips = [ip for ip in st.session_state.selected_ips if ip in valid_ips]

    st.session_state.comparison_metric = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
        ["–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂", "–û–±—â–∞—è –º–∞—Ä–∂–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"],
        index=["–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂", "–û–±—â–∞—è –º–∞—Ä–∂–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"].index(
            st.session_state.comparison_metric)
    )

    st.session_state.selected_ips = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ò–ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
        options=valid_ips,
        default=st.session_state.selected_ips
    )

    if st.session_state.selected_ips:
        compare_ips(metrics_by_ip, st.session_state.comparison_metric, st.session_state.selected_ips)
